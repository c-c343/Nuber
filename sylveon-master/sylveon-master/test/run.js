//During the test the env variable is set to test
process.env.NODE_ENV = 'test';
require("dotenv").config({ path: "../process.env" });

let mongoose = require("mongoose");
let User = require('../models/user');

//Require the dev-dependencies
let chai = require('chai');
let chaiHttp = require('chai-http');
let server = require('../server');
let should = chai.should();

// These can all be generated by POSTing /api/login with the proper credentials.
const ADMIN_KEY = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoicm9vdCIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTU0NDA2MDMzMH0.wvgogfUBomP-JYhSsa_KdGfFNNpCQvXkrfiyeNnychw";
const RIDER_KEY = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQnJpYW5uZSIsInJvbGUiOiJyaWRlciIsImlhdCI6MTU0NDA2MDgxNH0.sTSbzo2VSU9rtw-VoDcOj9R5eWbSgF-99sabllgGl40";
const DRIVER_KEY = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiRGF3biIsInJvbGUiOiJkcml2ZXIiLCJpYXQiOjE1NDQwMzkwODF9.SazgjMT5d1_3RATODNkgBKYb1USoU-wywkotZV0KIhE";

chai.use(chaiHttp);

describe('NuberAPI', () => {
   before((done) => {
      server.listen(process.env.PORT, () => {
         console.log("Test server is running...");
         done();
      });
   });
   beforeEach((done) => {
      User.deleteMany({role: "rider"}, (err) => {
         User.deleteMany({role: "driver"}, (err) => {
            done();
         });
      });
   });
   describe("Admin API", () => {
      it("should create riders", (done) => {
         chai.request(server).post("/admin/addRider").set('Authorization', ADMIN_KEY).send({
            name: "Dawn",
            password: "foo"
         }).end((err, res) => {
            res.should.have.status(200);
            res.body.name.should.eql('Dawn');
            res.body.role.should.eql('rider');
            done();
         });
      });
      it("should create drivers", (done) => {
         chai.request(server).post("/admin/addDriver").set('Authorization', ADMIN_KEY).send({
            name: "Dawn",
            password: "foo"
         }).end((err, res) => {
            res.should.have.status(200);
            res.body.name.should.eql('Dawn');
            res.body.role.should.eql('driver');
            done();
         });
      });
      it("should create admins", (done) => {
         chai.request(server).post("/admin/addAdmin").set('Authorization', ADMIN_KEY).send({
            name: "Dawn",
            password: "foo"
         }).end((err, res) => {
            res.should.have.status(200);
            res.body.name.should.eql('Dawn');
            res.body.role.should.eql('admin');
            done();
         });
      });
   });

   describe("Driver API", () => {
      beforeEach((done) => {
         // Sets up a driver and a rider to test with.
         chai.request(server).post("/admin/addDriver").set('Authorization', ADMIN_KEY).send({
            name: "Dawn",
            password: "foo"
         }).end((err, res) => {
            chai.request(server).post("/admin/addRider").set('Authorization', ADMIN_KEY).send({
               name: "Brianne",
               password: "bar"
            }).end((err, res) => {
               done();
            });
         });
      });

      it("should allow the driver to set bio information", (done) => {
         chai.request(server).put("/driver/Dawn/info").set('Authorization', DRIVER_KEY).send({
            vehiclePlate: "123456",
            vehicleType: "Ferarri LaFerarri"
         }).end((err, res) => {
            res.should.have.status(200);
            User.findOne({name: "Dawn"}, (err, user) => {
               user.vehiclePlate.should.eql("123456");
               user.vehicleType.should.eql("Ferarri LaFerarri");
               done();
            });
         });
      });

      it("should allow a driver to set their availability", (done) => {
         // Set available
         chai.request(server).put("/driver/Dawn/available").set('Authorization', DRIVER_KEY).send({
            available: true
         }).end((err, res) => {
            res.should.have.status(200);
            User.findOne({ name: "Dawn"}, (err, driver) => {
               driver.isAvailable.should.eql(true);
               // Set unavailable
               chai.request(server).put("/driver/Dawn/available").set('Authorization', DRIVER_KEY).send({
                  available: false
               }).end((err, res) => {
                  res.should.have.status(200);
                  User.findOne({ name: "Dawn"}, (err, driver) => {
                     driver.isAvailable.should.eql(false);
                     done();
                  });
               });
            });
         });
      });

      it("should allow the driver to set their current location", (done) => {
         chai.request(server).put("/driver/Dawn/location").set('Authorization', DRIVER_KEY).send({
            location: {
               lat: 29.8826818,
               lng: -97.9467711
            }
         }).end((err, res) => {
            res.should.have.status(200);
            User.findOne({ name: "Dawn" }, (err, user) => {
               user.position.lat.should.eql(29.8826818);
               user.position.lng.should.eql(-97.9467711);
               done();
            });
         });
      });

      it("should allow the driver to check assigned rider's destination/position", (done) => {
         // assign rider to driver
         chai.request(server).put("/rider/Brianne/driver").set('Authorization', RIDER_KEY).send({
            name: "Dawn"
         }).end((err, res) => {
            const riderVals = {
               position: {lat: 29.8888838, lng: -97.9430682},
               destination: {lat: 29.8826818, lng: -97.9467711}
            }
            // set rider position/destination
            User.findOneAndUpdate({name: "Brianne"}, riderVals, (err, rider) => {
               // check rider position through driver API
               chai.request(server).get("/driver/Dawn/rider").set('Authorization', DRIVER_KEY).end((err, res) => {
                  res.should.have.status(200);
                  res.body.position.should.eql(riderVals.position);
                  res.body.destination.should.eql(riderVals.destination);
                  done();
               });
            });
         })
      });
   })

   describe("Rider API", () => {
      beforeEach((done) => {
         // Sets up a driver and a rider to test with.
         chai.request(server).post("/admin/addDriver").set('Authorization', ADMIN_KEY).send({
            name: "Dawn",
            password: "foo"
         }).end((err, res) => {
            chai.request(server).post("/admin/addRider").set('Authorization', ADMIN_KEY).send({
               name: "Brianne",
               password: "bar"
            }).end((err, res) => {
               done();
            });
         });
      });

      it("should allow a rider to set a destination", (done) => {
         chai.request(server).put("/rider/Brianne/destination").set('Authorization', RIDER_KEY).send({
            location: "601 University Dr, San Marcos, TX"
         }).end((err, res) => {
            res.should.have.status(200);
            res.body.location.lat.should.eql(29.8888838);
            res.body.location.lng.should.eql(-97.9430682);
            User.findOne({ name: "Brianne" }, (err, user) => {
               user.destination.lat.should.eql(29.8888838);
               user.destination.lng.should.eql(-97.9430682);
               done();
            });
         });
      });

      it("should allow a rider to set a current location", (done) => {
         chai.request(server).put("/rider/Brianne/location").set('Authorization', RIDER_KEY).send({
            location: {
               lat: 29.8826818,
               lng: -97.9467711
            }
         }).end((err, res) => {
            res.should.have.status(200);
            User.findOne({ name: "Brianne" }, (err, user) => {
               user.position.lat.should.eql(29.8826818);
               user.position.lng.should.eql(-97.9467711);
               done();
            });
         });
      });

      it("should allow a rider to select a driver", (done) => {
         chai.request(server).put("/rider/Brianne/driver").set('Authorization', RIDER_KEY).send({
            name: "Dawn"
         }).end((err, res) => {
            res.should.have.status(200);
            User.findOne({ name: "Brianne" }).populate('driver').exec((err, user) => {
               user.driver.name.should.eql("Dawn");
               User.findOne({ name: "Dawn" }).populate('rider').exec((err, driver) => {
                  driver.rider.name.should.eql("Brianne");
               done();
               });
            });
         });
      });

      it("should allow a rider to view the current driver's bio", (done) => {
         // First, set the driver's bio.
         User.findOneAndUpdate({ name: "Dawn" },
            {
               vehicleType: "Hyundai Genesis",
               vehiclePlate: "7QFDV9",
               avgRating: 5
            }
         ).then(() => {
            // Then set the rider's driver.
            chai.request(server).put("/rider/Brianne/driver").set('Authorization', RIDER_KEY).send({
               name: "Dawn"
            }).end((err, res) => {
               // Then, check the bio of the driver.
               chai.request(server).get("/rider/Brianne/driver").set('Authorization', RIDER_KEY).end((err, res) => {
                  res.should.have.status(200);
                  res.body.name.should.eql("Dawn");
                  res.body.vehicleType.should.eql("Hyundai Genesis");
                  res.body.vehiclePlate.should.eql("7QFDV9");
                  res.body.avgRating.should.eql(5);
                  done();
               });
            });
         })
      });

      it("should allow a rider to check the current driver's location", (done) => {
         // First, set the driver's position.
         User.findOneAndUpdate({ name: "Dawn" },
            {
               position: {
                  lat: 20,
                  lng: -42
               }
            }
         ).then(() => {
            // Then set the rider's driver.
            chai.request(server).put("/rider/Brianne/driver").set('Authorization', RIDER_KEY).send({
               name: "Dawn"
            }).end((err, res) => {
               // Then, check the bio of the driver.
               chai.request(server).get("/rider/Brianne/driver").set('Authorization', RIDER_KEY).end((err, res) => {
                  res.should.have.status(200);
                  res.body.name.should.eql("Dawn");
                  res.body.position.lat.should.eql(20);
                  res.body.position.lng.should.eql(-42);
                  done();
               });
            });
         })
      });

      it("should allow a rider to rate their driver", (done) => {
         // First, set the rider's driver.
         chai.request(server).put("/rider/Brianne/driver").set('Authorization', RIDER_KEY).send({
            name: "Dawn"
         }).end((err, res) => {
            // Then, send the rating.
            chai.request(server).post("/rider/Brianne/driver/rate").set('Authorization', RIDER_KEY).send({
               rating: 4
            }).end((err, res) => {
               res.should.have.status(200);
               User.findOne({ name: "Dawn" }, (err, user) => {
                  user.ratings[0].should.eql(4);
                  user.avgRating.should.eql(4);
                  done();
               });
            });
         })
      });

      it("should display route information about currently selected route", (done) => {
         // Set rider position and destination (from TXST => UT).
         User.findOneAndUpdate({name: "Brianne"}, {
            position: {
               lat: 29.8826818,
               lng: -97.9467711
            },
            destination: {
               lat: 30.2849,
               lng: -97.7341
            }
         }, (err, rider) => {
            chai.request(server).get("/rider/Brianne/routeinfo").set('Authorization', RIDER_KEY).end((err, res) => {
               res.should.have.status(200);

               // Check that fare/distance is present.
               res.body.fare.should.be.above(60);
               res.body.fare.should.be.below(70);
               res.body.distance.value.should.be.above(51000);
               res.body.distance.value.should.be.below(54000);
               done();
            });
         });
      });

      it("should show the rider all drivers in a 10 mile radius", (done) => {
         // Create a second driver
         chai.request(server).post("/admin/addDriver").set('Authorization', ADMIN_KEY).send({
            name: "Danielle",
            password: "baz"
         }).end((err, res) => {
            // Set positions for all parties
            User.findOneAndUpdate({name: "Danielle"}, {position: {lat: 29.8826818, lng: -97.9467711}
            }).then(() => {
               User.findOneAndUpdate({name: "Dawn"}, {position: {lat: 30.2849, lng: -97.7341}})
            .then(() => {
               User.findOneAndUpdate({name: "Brianne"}, {position: {lat: 29.8835, lng: -97.9404}})
            .then(() => {
               // We should only get Danielle
               chai.request(server).get("/rider/Brianne/nearbyDrivers").set('Authorization', RIDER_KEY).end((err, res) => {
                  res.should.have.status(200);
                  res.body.length.should.eql(1);
                  res.body[0].name.should.eql('Danielle');
                  done();
               });
            })})});
         });
      });
   });
});
